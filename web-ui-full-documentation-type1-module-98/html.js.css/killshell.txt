
					______  _     _  _____  _______ _______ _______ ______ 
					|  ____ |_____| |     | |______    |    |______ |     \
					|_____| |     | |_____| ______|    |    |______ |_____/
					*******************************************************
					* Help -> Command list                                *
					* warn -> List all warnings and usages                *
					*******************************************************
					* Ghosted, A shell for automation of os deletion and  *
					* corruption. Written from go, t, asm, C.             *
					*                                                     *
					*Supported systems -> Mac, Windows, Linux             *
					*******************************************************


A yes we finally bring ourselves to the GHOSTED shell, first this is diffucult 
for some people to process so lets get the basics down, this is a 

VERY VERY DANGEROUS APPLICATION AND SHELL TO REMOVE OR CORRUPT OPERATING SYSTEMS 
FAST, THis has been tested and i can say from testing this shell if you are on 
linux or mac will completely erase EVEYRHTING this includes the following 

Plugged in USB drives 
Extra HDD's/SSD's with the same filesystem
cirrecupt and possibly kill drives 
erase any and all partitions
Kill all network settings and will deface every file in your filepath

I HIGHLY SUGGEST BEFORE USING THIS YOU 100% WANT TO RUN THIS SCRIPT EVEN THOUGH 

YOU KNOW THERE IS ALMOST 100% CHANCE OF IT KILLING ALL DRIVES AND CONNECTED SYSTEMS 

THIS WILL ACT ALOT LIKE BOOTWARE WHICH WILL MAKE IT IMPOSSIBLE TO BOOT INTO YOUR DEVICE

OR OS AGAIN UNTIL PROPER RESTORE IS FINISHED, NOTE ONCE YOU ENTER THE COMMANDS THERE

IS

NO

GOING

BACK


** Scare security warned you **

Now lets actually get into what this tool is, so if you dont know a while back i posted a shell 
just like this in C which here is a small code snippet of what it looked like

#include stdio.h
#include stdlib.h
#include string.h 
#include time.h
/////////////// COLORING /////////////////////////
#define BLK "\e[0;30m"
#define RED "\e[0;31m"
#define GRN "\e[0;32m"
#define YEL "\e[0;33m"
#define BLU "\e[0;34m"
#define MAG "\e[0;35m"
#define CYN "\e[0;36m"
#define WHT "\e[0;37m"
//Regular bold
#define BBLK "\e[1;30m"
#define BRED "\e[1;31m"
#define BGRN "\e[1;32m"
... more and more colors

int main(){
    printf("\x1b[H\x1b[2J\x1b[3J");
    char response[5];
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    printf("\e[0;35m***********************************************\n\e[0;35m");
    printf("\e[0;35m*         GHOST UTERM FOR OS-REM              *\n\e[0;35m");
    printf("\e[0;35m*           %d-%02d-%02d %02d:%02d:%02d               *\n\e[0;35m", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
    printf("\e[0;35m*                                             *\n\e[0;35m");
    printf("\e[0;35m***********************************************\n\e[0;35m");
    printf("\e[0;91mOperating System -> ");
    scanf("%s", response);
    if (strcmp(response, "windows")==0){
        char wina[5];
        printf("\n\e[0;36m[\e[0;35m?\e[0;36m] This OS is recognizeed as a windows system\n");
        printf("\n\e[0;36m[\e[0;35m?\e[0;36m] Would you like to reset, crash, or remove it\n");
        printf("\n\e[0;36m[\e[0;35m?\e[0;36m] re - reset |      \n");
        printf("Options -> ");
        scanf("%s", wina);
        if (strcmp(wina, "re")==0){
            printf("\n\e[0;33m[+] Starting command.....\n");
            printf("\n\e[0;33m[+] Executing......\n");
            system("sleep 2");
            system("systemreset -factoryreset");
        }
    }



this small script would detect your OS based off what OS the user chose, and reset or kill the 

entire operating system, this is a complete rewrite and overhual of this script and its also in go 

with safer features and more commands 

we can execute this shell by typing the command 

ghosted in the RR5 terminal, once done we get the following output

					______  _     _  _____  _______ _______ _______ ______ 
					|  ____ |_____| |     | |______    |    |______ |     \
					|_____| |     | |_____| ______|    |    |______ |_____/
					*******************************************************
					* help -> Command list                                *
					*******************************************************
					* Ghosted, A shell for automation of os deletion and  *
					* corruption. Written from go, t, asm, C.             *
					*                                                     *
					*Supported systems -> Mac, Windows, Linux             *
					*******************************************************

				Ghosted> 


As we can see we have two commands by defualt shown help 

help will show a help menu with all the possible warnings for each command here is what 

we get when we use that command



  
					______  _     _  _____  _______ _______ _______ ______ 
					|  ____ |_____| |     | |______    |    |______ |     \
					|_____| |     | |_____| ______|    |    |______ |_____/
					*******************************************************
					* help -> Command list                                *
					* warn -> List all warnings and usages                *
					*******************************************************
					* Ghosted, A shell for automation of os deletion and  *
					* corruption. Written from go, t, asm, C.             *
					*                                                     *
					*Supported systems -> Mac, Windows, Linux             *
					*******************************************************

				Ghosted> help





  
				________________Command______Type________DangerLevel________Desc________________________
				|[1]  Clear or cls          |None   |    | None to  0   |Clear Terminal                |
				|[2]  time                  |None   |    | None to  0   |Get time current              |
				|[3]  online?               |None   |    | None to  0   |Check connection              |
				|[4]  sys-inf               |None   |    | None to  0   |Get system info               |
				|[5]  cpu                   |None   |    | None to  0   |Get system CPU                |
				|[6]  f-size                |String |    | None to .5   |Get a files size              | 
				|[7]  hex                   |String |    | None to .5   |Read file in byte             |
				|[8]  f-del                 |String |    | None to 1    |Delete a file                 |
				|[9]  copy-f                |String |    | None to 1    |Copy a file to a new location |  
				|[10] exit                  |None   |    | None to 0    |Exit the script               |
				|[11] Ctrl+C <key hangup>   |None   |    | None to 0    |Exit the script via ctrl+C    |
				|[12] h-dir                 |String |    | None to 0    |Get the home dir content      |
				|[13] dir?                  |String |    | None to 0    |Check if a directory exists   |
				|[14] w-dir                 |None   |    | None to 0    |Get the working directory     |
				|[15] c-dir                 |String |    | None to 0    |Create a directory            |
				|[16] walk-dir-l            |String |    | None to 0    |Check a dir for large files   |
				|[17] walk-dir-s            |String |    | None to 0    |Check a dir for ALL files     |
				|[18] h-dir                 |String |    | None to 0    |Check home dir for ALL files  |
				|[19] host                  |None   |    | None to 0    |Get the systems hostname      |
				|[20] tree                  |None   |    | None to 0    |Get all subdir's in home dir  |
				|[21] laddr                 |None   |    | None to 0    |Get all your interfaces       |
				|---------------------------|-------|----|--------------|------------------------------|
				* THIS IS A COMMAND OF DANGER ZONE, COMMANDS HERE CAN RESULT IN SYSTEMATIC CORRUPTION  *
				* OR CAN RESULT IN YOUR OS BEING RESET, DELETED, CORRUPT, OR CRASH. YOU ARE WARNED     *
				****************************************************************************************
				________________Command______Type________DangerLevel________Desc________________________
				|[DE] reset-windows         |None   |    | WARN: 10     |Will reset windows 10 system   |
				|[DE] reset-mac             |None   |    | WARN: 10     |Will reset MAC OS systems      |
				|[DE] reset-linux           |None   |    | WARN: 10     |Will reset linux machines      |
				|[DE] kill-linux            |None   |    | WARN: 100    |Will kill EVERY DRIVE AND PT   | 
				|[DE] reset-settings-dconf  |None   |    | WARN: 10     |Will attempt to reset settings |
				


Wow big list right? okay its not too bad, lets go through the table of data header first 

First we have command which is the command you will run 

the type which specifies wether or not interaction is needed 

if its a string then interction is needed by the user 



Now this script is a mix of inline C/ASM and Powered mainly by go, to get the host information 

like the cpu or general information it will work along side of C and inline assembly mixed in 

with the inline assembly to gather that data, here is an example of the code that works as such 


//}
////grab the cpu based data
//int a[10];
//void brandString(int eaxValues)
//{
//    if (eaxValues == 1) {
//    __asm__("mov $0x80000002 , %eax\n\t");
//    }
//    else if (eaxValues == 2) {
//        __asm__("mov $0x80000003 , %eax\n\t");
//    }
//    else if (eaxValues == 3) {
//        __asm__("mov $0x80000004 , %eax\n\t");
//    }
//    __asm__("cpuid\n\t");
//    __asm__("mov %%eax, %0\n\t":"=r" (a[0]));
//    __asm__("mov %%ebx, %0\n\t":"=r" (a[1]));
//    __asm__("mov %%ecx, %0\n\t":"=r" (a[2]));
//    __asm__("mov %%edx, %0\n\t":"=r" (a[3]));
//    printf("%s", &a[0]);
//}
//
//void getCpuID()
//{
//    __asm__("xor %eax , %eax\n\t");
//    __asm__("xor %ebx , %ebx\n\t");
//    __asm__("xor %ecx , %ecx\n\t");
//    __asm__("xor %edx , %edx\n\t");
//    printf("CPU is => ");
//    brandString(1);
//    brandString(2);
//    brandString(3);
//    printf("\n");
//}


pulled from the following assembly script i made a while back


section .data ;tell it to work
        string db "Current Branded CPU => > XXXXXXXXXXXX > ",0xA
section .text
global _start
_start:
       xor eax,eax
       cpuid 
       mov edi,string
       mov [edi+25],ebx ;why am i doing this 
       mov [edi+29],edx
       mov [edi+33],ecx
       mov eax,4
       mov ebx,1
       mov ecx,string
       mov edx,41
       int 0x80 ; i hate myself for ever thinking i could be good at this lang XD
       mov eax,1
       xor ebx,ebx
       int 0x80 ; finally that took a while 


The assmembly script would grab your vendor ID of your CPU, i found a way to inline assembly 

with c and impliment C into go so i took the exact same concept and snapped it in with a little 

help from some old UNIX/LINUX ASM forums which people were talking about getting hardware vendor 

ID's


so when you cun the following command cpu in the ghosted terminal you get this as an example 

CPU is => AMD Ryzen 7 3700X 8-Core Processor             

this is my current CPU but yours will change 

if you have intel it will pop up as GENUIN INTEL

etc etc

now another example of the working inline c code is when we use the sys-inf tag or command 

in the terminal which will give us an output as 

|System Name             |=> Linux
|                        |Node/System Name        |=> XE43P3R
|                        |System Current Version  |=> #1 SMP Debian 5.14.9-9parrot1 (2021-10-26)
|                        |Release Version         |=> 5.14.0-9parrot1-amd64
|                        |Machine ARCH            |=> x86_64

coming from here 


//    struct utsname buf1;
//    errno =0;
//    if(uname(&buf1)!=0)
//    {
//        perror("Error => Uname returned 0");
//        exit(EXIT_FAILURE);
//    }
//    printf("|System Name             |=> %s\n", buf1.sysname);
//    printf("|                        ");
//    printf("|Node/System Name        |=> %s\n", buf1.nodename);
//    printf("|                        ");
//    printf("|System Current Version  |=> %s\n", buf1.version);
//    printf("|                        ");
//    printf("|Release Version         |=> %s\n", buf1.release);
//    printf("|                        ");
//    printf("|Machine ARCH            |=> %s\n", buf1.machine);
//}


now this shell has some pretty unique things to it but ill spare you the simple shit 

and move onto the more dangerous / fucked up commands

so in this shell it currently upports the reset / destruction of 2 main filesystems

/ -> Linux

and 

\ -> windows

now i will have you know before hand the way the assembly was written will vary 

wether or not it will work for your operating system, as when you write assembly 

you spceify it twards The OS type, filesystem, BIT, and CPU that you are running 

that is if you are writing stuff like this 




format PE GUI 4.0
entry start

include 'win32w.inc'

section '.text' code readable executable

  start:

        invoke  GetModuleHandle,0
        mov     [wc.hInstance],eax
        invoke  LoadIcon,0,IDI_APPLICATION
        mov     [wc.hIcon],eax
        invoke  LoadCursor,0,IDC_ARROW
        mov     [wc.hCursor],eax
        invoke  RegisterClass,wc
        test    eax,eax
        jz      error

        invoke  CreateWindowEx,0,_class,_title,WS_VISIBLE+WS_DLGFRAME+WS_SYSMENU,128,128,256,192,NULL,NULL,[wc.hInstance],NULL
        test    eax,eax
        jz      error

  msg_loop:
        invoke  GetMessage,msg,NULL,0,0
        cmp     eax,1
        jb      end_loop
        jne     msg_loop
        invoke  TranslateMessage,msg
        invoke  DispatchMessage,msg
        jmp     msg_loop

  error:
        invoke  MessageBox,NULL,_error,NULL,MB_ICONERROR+MB_OK

  end_loop:
        invoke  ExitProcess,[msg.wParam]

proc WindowProc uses ebx esi edi, hwnd,wmsg,wparam,lparam
        cmp     [wmsg],WM_DESTROY
        je      .wmdestroy
  .defwndproc:
        invoke  DefWindowProc,[hwnd],[wmsg],[wparam],[lparam]
        jmp     .finish
  .wmdestroy:
        invoke  PostQuitMessage,0
        xor     eax,eax
  .finish:
        ret
endp

section '.data' data readable writeable

|
|
which is specified twards a WINDOWS32 system, and only made for GENUIN INTEL Cores/CPU's

apart from this code here the main commands we have here will be the follwoing


				________________Command______Type________DangerLevel________Desc________________________
				|[DE] reset-windows         |None   |    | WARN: 10     |Will reset windows 10 system   |
				|[DE] reset-mac             |None   |    | WARN: 10     |Will reset MAC OS systems      |
				|[DE] reset-linux           |None   |    | WARN: 10     |Will reset linux machines      |
				|[DE] kill-linux            |None   |    | WARN: 100    |Will kill EVERY DRIVE AND PT   | 
				|[DE] reset-settings-dconf  |None   |    | WARN: 10     |Will attempt to reset settings |


I think by the command title you will know what they do, however this is where it becomes extremely tricky

so during development of this shell and RR5 i setup a spceified OS on a whole new HDD with no VM on it which 

means the OS was basically hard installed onto that drive, and well i decided to un the command kill-linux which 

would literally delete the entire os from the / dir up, to my knowlege i didnt which is also why RR5's 

production was soon to be delayed at this moment so many times, when you run this command it will auto detect 

your main or running operating system, if you are on windows you can use the command kill-linux and it will just tell you 

hey ro your not on a linux machine so im going to just factoryreset your windows system and this will also 

go based off of your system ARCH if you are 32 the commands that are executed change which is called 

in the code block seen here as an example the person uses the command kill-linux and you are on a mac 

golang will call the linux function but also use the RUNTIME.GOOS function to test if the os is right 

if not it calls the C function to test the OS again and if it comes back false, it will detect the OS and 

prompt the shell

code block seen here

//    #elif TARGET_OS_MAC
//        char command[] = "xartutil --erase-all";
//        printf("\x1b[H\x1b[2J\x1b[3J");
//        char response[10];
//        time_t t = time(NULL);
//        struct tm tm = *localtime(&t);
//        printf("\e[0;35m***********************************************\n\e[0;35m");
//        printf("\e[0;35m*         GHOST UTERM FOR OS-REM              *\n\e[0;35m");
//        printf("\e[0;35m*           %d-%02d-%02d %02d:%02d:%02d               *\n\e[0;35m", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
//        printf("\e[0;35m*                                             *\n\e[0;35m");
//        printf("\e[0;35m***********************************************\n\e[0;35m");
//        printf("\e[0;91m[-] Operating System Detected -> MAC OS\n\n");
//        printf("\e[0;91m[-] Operating System Arch     -> 32\n\n");
//        printf("-----------------------------------------------------------------------------------");
//        printf("\e[0;91m[+] hitting Enter : Will continue with the deletion/factory reset process\n");
//        printf("\e[0;91m[*] it is suggested that you read the documentation, if you have not yet ");
//        printf("\e[0;91m[*] please do exit out of this script with crtl+c and reading the danger ");
//        printf("\e[0;91m[*] documentation and the potential damages that could occur ");
//        printf("\n         >>>> \n");
//        fgets(response, sizeof(response), stdin);
//        printf("running")
//        system(command);
//    #else
//        print



now lets move onto the dangers 

as described in the beggining of this documentation the commands to kill or even reset 

your OS are very dangerous and unstable, even if it is a system command it can still cause 

damage that can not be reversed, it is highly suggested you check this before you keep going 

forward, there is not much to this other than it gets lower end level system information 

and will gladly hapily kill your os for you