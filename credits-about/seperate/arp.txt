Command ARP


this is a ARP tool written in golang that well- just doesnt stop arping, this is a very lightweight 

fast but nice arp scanner that is quite accurate as well, while not being able to identify devices it stores 

all data in a list called out.txt which is all the IP addresses that came back as true and mac addresses


when you run this command in the terminal there is an error that can occure 

```
you do not have premissions to capture or send on this device
```

this means you are not root, please do run your terminal as admin or run as root user ex sudo ruby main.rb


when you run the command `ARP` or lower case `arp`

you will get the following output


```
  ______     ______     _____     ______     ______     ______     ______     __     ______  
/\  == \   /\  ___\   /\  __-.  /\  == \   /\  __ \   /\  == \   /\  == \   /\ \   /\__  _\ 
\ \  __<   \ \  __\   \ \ \/\ \ \ \  __<   \ \  __ \  \ \  __<   \ \  __<   \ \ \  \/_/\ \/ 
 \ \_\ \_\  \ \_____\  \ \____-  \ \_\ \_\  \ \_\ \_\  \ \_____\  \ \_____\  \ \_\    \ \_\ 
  \/_/ /_/   \/_____/   \/____/   \/_/ /_/   \/_/\/_/   \/_____/   \/_____/   \/_/     \/_/ 

                                               ((`\
                                            ___ \\ '--._
                                        .'`   `'    o  )
                                        /    \   '. __.'
                                      _|    /_  \ \_\_
                                     {_\______\-'\__\_\
-----------------------------------------------------------------------------------
                                    _____ ____ _____
                                   /    /      \    \ with the power of ruby
                                 /____ /_________\____\        i become stronger
                                 \    \          /    /                 and stronger 
                                    \  \        /  /
                                       \ \    / /
                                         \ \/ /
                                           \/
--------------------------------------------------------------------------------------------
 [  Online  ] 			[   File in loaded  ] 

				[   File out loaded  ]


[ 1 ] STAT: Module ARP loaded 
2021/12/24 10:12:40 [INTERFACE] ->  lo 127.0.0.1/8
2021/12/24 10:12:40 [INTERFACE] ->  lo ::1/128
2021/12/24 10:12:40 [INTERFACE] ->  wlan0 ip4
2021/12/24 10:12:40 [INTERFACE] ->  wlan0 ip=range=6
2021/12/24 10:12:40 [INTERFACE] ->  wlan0 ip=range=6
2021/12/24 10:12:40 [INTERFACE] ->  wlan0 ip=range=6
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 ip=range=4
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 ip=range=6
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 ip=range=6
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 ip=range=6
2021/12/24 10:12:40 interface eth1: [?] Unstable Network on card
2021/12/24 10:12:40 interface wlan1: [?] Unstable Network on card
2021/12/24 10:12:40 interface lo: [*] Skipping LO
2021/12/24 10:12:40 interface eth0: [?] Unstable Network on card
2021/12/24 10:12:40 interface mon0: [?] Unstable Network on card
2021/12/24 10:12:40 [*] USING CURRENT NET RANGE -> ip=range=4 FOR INTERFACES -> wlan0
2021/12/24 10:12:40 [*] USING CURRENT NET RANGE -> ip=range=4 FOR INTERFACES -> wlan2


```


lets first break this down by starting with the file loaded output, the file loaded output at the top is both the input and output file 


this script works by saving the addresses in one file, copying and then finally moving to in.txt where everything is properly saved 

we run the program and you will notice the directory modules/wifi will now have three files

one for port scanning 
one for general IP 
one for MAC addresses and IP's laced together

in.txt -> is where the geneal MAC AND IP's are inputted
out.txt -> is where the general MAC and IP's are saved
lace_ip.txt -> is where the IP addresses with no general strings are stored for listed port scanning in the option port-gl which allows

golang listed port scanning for quicker and more responsive recon


lets now talk about the stat and interface load before the arp starts 


the [INTERFACE] tag specified that the interfaces and arp module has been loaded, this will gather all of your 

interface informatiopn IP6-IP4 and tell you what will be used and if there is a err on the network card obviously 

the tag ip=range=6 will not be there as that is just a placeholder for my example network addresses as the real output 

will show ranges of IP6-4 addresses like this 


```
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 0.0.0.0/98
2021/12/24 10:12:40 [INTERFACE] ->  wlan2 ffff:ffff:fff:ff:fff:ffff:ffff/90

```

you sometimes will get the warning message 

SKIPPING LO, this means it will not use the loopback interface as a way to send out ARP requests and will instead skip onto the next card 

sometimes you will also recieve this error ( despite the ARP still conitnueing on)


```
MASK TO LARGE this means that 

if your interface addr.Mask[0] != 0xff || addr.Mask[1] != 0xff

then it will become to large for it to range from 
```


other warning messages can occure such as 


Unstable Network on card

this will mean that

the address on that card side came back nil/null/empty and it is considered unstable as a network, however this will not cause a major issue 

it just simply means the program wasnt able to identify it properly


once we are done we can now look at the terminal to see everything it picked up 


````
$ example output 


IP-ADDR =>   ip4 Has MAC ADDR of =>    ff:ff:ff:ff:ff:ff
[+] IP-ADDR => ip4 Has MAC ADDR of =>   ff:ff:ff:ff:ff:ff
|[+] IP-ADDR =>  ip4 Has MAC ADDR of => ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
/[+] IP-ADDR => ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff
[+] IP-ADDR =>  ip4 Has MAC ADDR of =>  ff:ff:ff:ff:ff:ff

````

** NOTE: SOME ADDRESSES WILL REPEAT THIS IS DUE TO THE FACT IT CONSTANTLZY SENDS OUT ARP REUQESTS AND LISTENS FOR A CTRL+C HANGUP **
** EXPECT SOME HOSTNAMES TO HAVE THE SAME MAC ADDRESS AND THE SAME IP THIS IS ONLY BCEAUSE OF RE LOOP AND SCANNING                **


once you think you are finished arping and you are confident the scanner has fully scanned the network, then press CTRL+C which will exit the program

when we are completely out of the program we can run the following command to view all the information saved to the files 

````
cat modules/out.txt ; cat modules/lace_ip.txt

````

which will again give us all captured information