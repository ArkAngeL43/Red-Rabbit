
   __          _         __       _     _     _ _             ____  
  /__\ ___  __| |       /__\ __ _| |__ | |__ (_) |_    /\   /\ ___| 
 / \/// _ \/ _` |_____ / \/// _` | '_ \| '_ \| | __|___\ \ / /___ \ 
/ _  \  __/ (_| |_____/ _  \ (_| | |_) | |_) | | ||_____\ V / ___) |
\/ \_/\___|\__,_|     \/ \_/\__,_|_.__/|_.__/|_|\__|     \_/ |____/ 


Chapter 2: BSSID/SSID scouting
------------------------------

as i have explained before the wireless part of this project was quite long 

however good news for you is this means the documentation will be long and in detail :D


so first, in RR5 there are 3 commands for SSID/BSSID scouting 

G-BSSID 
W-SSID 


now you may be asking wtf is the diffrence truth is the language barrier, for those reading who do keep a long tab both in 

my discord server, on my instaram, or even on my github know that i have been trying as hard as possible to deprecate perl

c, assembly, and the worst of all python. so to replace all of those languages and annoying installs i decided to use golang 

a great, fast, easy to use, writeable and descriptive language overall. however for some tools like the wireless tools i had 

to still keep python instead of ruby, i have found that the python run give more information and runs possibly the best than all 3 


first lets go through the golang file 


what are the pros and cons about this one? ( g-bssid )
===========================================


pros : it writes to a file, it is fast, it changes channels and shows the channel of each BSSID it caught, it logs errors 

and it activates your interface 


cons : it can end up repeating BSSID's it already discovered given its under a for loop, data is sparse and not in much details


simply we run this command 

G-BSSID to activate the script and tool you will get the something like the following example output


````

   _________BSSID________CHAN____
 1 | 	 ff:ff:ff:ff:ff:ff -67
 2 | 	 ff:ff:ff:ff:ff:ff -75
 3 | 	 ff:ff:ff:ff:ff:ff -90
 4 | 	 ff:ff:ff:ff:ff:ff -31
 5 | 	 ff:ff:ff:ff:ff:ff -51
 6 | 	 ff:ff:ff:ff:ff:ff -53
 7 | 	 ff:ff:ff:ff:ff:ff -79
 8 | 	 ff:ff:ff:ff:ff:ff -45
 9 | 	 ff:ff:ff:ff:ff:ff -31
10 | 	 ff:ff:ff:ff:ff:ff -56
11 | 	 ff:ff:ff:ff:ff:ff -76
12 | 	 ff:ff:ff:ff:ff:ff -57
13 | 	 ff:ff:ff:ff:ff:ff -35

````


and it will appear and disappear, you will also notice in the filepath 

modules/wifi the files ion/out.txt appear, this has the same concept for one of the 

network recon scripts, the in/out file stores the BSSID, however the con about this is sometimes 

this file can have repeated BSSID's which isnt too bad of a thing but too a new user not seeing any form 

of SSID or ID it can get quite confusing 

here is a tip 


look out for the last two or first integers of the bssid, if it repeats twice then it was repeated and is the same



what are the pros and cons about the W-SSID ( the python one )
============================================


pros : well for one it has a way more neater output, it tables the output, it changes channels, it has a SSID finder.

it shows the time elapsed, it gets the encryption level etc 


cons : it doesnt write to a file, some SSID's dont show up, sometimes the wireless interface wont work, 

sometimes the SSID will be hidden and show 0 output.



lets talk about this in way more depth, we will run the command W-SSID and we will be prompted to anser the following 

what card you want to activate ( please activate your interface before hand and in the input type interfacename with mon0 at the end 

example wlan0mon
)

this is because the input is a little glitchy and just is wacky. anyway the output will look something like this 



````
[Time Elapsed > ]2021-12-25 20:21:04.650333
+-------------------------------------------------------------------------------------------------+
|                               Networks Within Length of Interface                               |
+-------------------------------------------------------------------------------------------------+
|                                              SSID dBm_Signal Channel                     Crypto |
| BSSID                                                                                           |
| ff:ff:ff:ff:ff:ff                          <ssid>        -61       1                 {WPA2/PSK} |
| ff:ff:ff:ff:ff:ff                          <ssid>        -38       6                 {WPA2/PSK} |
| ff:ff:ff:ff:ff:ff                                        -41       6                 {WPA2/PSK} |
| ff:ff:ff:ff:ff:ff                                        -36       6  {WPA2/802.1X, WPA/802.1X} |
+-------------------------------------------------------------------------------------------------|

````
