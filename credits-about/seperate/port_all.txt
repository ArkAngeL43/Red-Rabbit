██████╗ ███████╗██████╗       ██████╗  █████╗ ██████╗ ██████╗ ██╗████████╗   ██╗   ██╗███████╗
██╔══██╗██╔════╝██╔══██╗      ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝   ██║   ██║██╔════╝
██████╔╝█████╗  ██║  ██║█████╗██████╔╝███████║██████╔╝██████╔╝██║   ██║█████╗██║   ██║███████╗
██╔══██╗██╔══╝  ██║  ██║╚════╝██╔══██╗██╔══██║██╔══██╗██╔══██╗██║   ██║╚════╝╚██╗ ██╔╝╚════██║
██║  ██║███████╗██████╔╝      ██║  ██║██║  ██║██████╔╝██████╔╝██║   ██║       ╚████╔╝ ███████║
----------------------------------------------------------------------------------------------------------------


the 4th and 5th command we will be looking at as a demonstartion will be 

port-r port-g


these are quiote literally the same, they are both port scanners for any form of host however 

one can parse lists and work faster than the other, and one can work a bit slower while being 

more accurate with results than the other and only take one host

port-g is my module written in golang for automation of TCP port scanning using go it can port scan 

IP's, world wide web hostnames, private hostnames, localhostnames, and lists if you have a list of hosts 

you would like it to open and or read then you can specify the path ( BE SPECIFIC IT MATTERS )


lets say we run command port-g ( port scanner golang)

and we have a list of hosts called hosts.txt with the follwoing in the file 

```
0.0.0.0
127.0.0.1
::1
a random IPV6 addr
www.scanme.org
www.hulu.com
2607:f8b0:4008:800::2004
some random serrver address 
```
the golang port scanner will rea dthe path of the file and scan every single name in there and parse the result

s pretty damn fast however this can also affect the accuracy in the scanner and how fast it scans here is the list 

of avalible ports it can currrently scan ( Tue 21 Dec 2021 06:14:30 PM  )

````
7:    "echo",
20:   "ftp",
21:   "ftp",
22:   "ssh",
23:   "telnet",
25:   "smtp",
43:   "whois",
53:   "dns",
67:   "dhcp",
68:   "dhcp",
80:   "http",
110:  "pop3",
123:  "ntp",
137:  "netbios",
138:  "netbios",
139:  "netbios",
143:  "imap4",
443:  "https",
513:  "rlogin",
540:  "uucp",
554:  "rtsp",
587:  "smtp",
873:  "rsync",
902:  "vmware",
989:  "ftps",
990:  "ftps",
1194: "openvpn",
3306: "mysql",
5000: "unpn",
8080: "https-proxy",
8443: "https-alt",
161: "Simple Network Managment Protocol 	(SNMP)",
162: "Simple Network Managment Protocol 	(SNMP)",
389:   "LightWeight DIrectory Acess Protocol  (LDAP)",
135:   "NetBIOS",
49152: "CMS",
65535: "CMS",
49151: "Reserved",
47808: "BACNET",
44405: "Mu Online Connect Server",
42806: "Discord",
41797: "CSTP (Creston Secure Terminal Port)",
41796: "CSCP (Creston Secure Control Port)",
41795: "CTP  (Creston Terminal Port",
41794: "CCP  (creston Control Port",
41121: "Tentacal Server",
40000: "SafetyNET p – a real-time Industrial Ethernet protocol",
19812: "4D Database SQL Communication",
19813: "4D database Client Server Communication",
19814: "4D database DB4D Communication",
19999: "DNP ( Distributed Network Protocal",
19532: "SystemD-journal-gatewayd",
19531: "SystemD-journal-remote",
25565: "Minecraft (Java) Multiplayer Server",
25575: "Minecraft (Java) Multiplayer Server RCON",
23399: "Skype Server",
22136: "FLIR Camera Resoruce Protocal",
19302: "Google Talk/Video Communications",
19295: "Google Talk/Video Communications",
19294: "Google Talk/Video Communications",
19133: "Minecraft Bedrock edition IPV6 multiplayer server",
19132: "Minecraft Bedrock edition Multiplayer server",
18333: "Bitcoing test network",
16567: "BattleFeild 2 | mod ",
````
( NOTE: in newer versions yes more ports and services will be added)

now we go to port-r which is a built in single host port scanner that scans 

1-8090 ports, this is a firm medium pased port scanner that can scan single hosts

despite its disability to not be able to open files and append them to the scanner 

as of writing this, it can still scan accuratley with medium speed and quite decent results 
