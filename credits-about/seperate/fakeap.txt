
Command => fake-ap

this was aactually one of the more difficult ones, first i had alot of issues with errors 

where strings wouldnt pqarse, names wouldnt go right etc, keep in mind the code i used was in 

the end writen when packetgen first came out and i tried the best i could to modify it and make it

into a module, dont expect the best out of it. but the simple idea of this command is to just show 

the general idea of penetration testing. now what does it do, well for starters it sends out fake access 

points using packetgen, this isnt nothing as said above special where you can connect, or monitor connections.

but it can be a little `scare` XD if you must say 

going forward you must run RR5 as a root script this is because the interface will be opened and used which will 

usually almost 100% of the time need root access to do so, your interface will also need to be in monitor mode 

see command

```
ch5 interfaces 
```

in the interactive web documentation for RR5 for more detials on using RR5 to set 

your interfcae in monitor mode or doing it individually without RR5


when we execute the command we are brought to input out interface 

mine is wlan0mon

and then the name of the FAKE AP we will be setting up, this is suggested to be above 5 characters

and nothing less cause then it messes with the output `note: leave it empty and script will exit`

my SSID's name is kingforlary

now alot of people will be confused about this last part here which asks for a packet view 

the packet view is going to be wether or not you want to see the packets structure, for the case 

of breakdown and documentation im going to select yes or Y and hit enter 

when we do we are brought to the following output 





```````
        ______     ______     _____     ______     ______     ______     ______     __     ______  
       /\  == \   /\  ___\   /\  __-.  /\  == \   /\  __ \   /\  == \   /\  == \   /\ \   /\__  _\ 
       \ \  __<   \ \  __\   \ \ \/\ \ \ \  __<   \ \  __ \  \ \  __<   \ \  __<   \ \ \  \/_/\ \/ 
        \ \_\ \_\  \ \_____\  \ \____-  \ \_\ \_\  \ \_\ \_\  \ \_____\  \ \_____\  \ \_\    \ \_\ 
         \/_/ /_/   \/_____/   \/____/   \/_/ /_/   \/_/\/_/   \/_____/   \/_____/   \/_/     \/_/ 
       
                                                      ((`\
                                                   ___ \\ '--._
                                               .'`   `'    o  )
                                               /    \   '. __.'
                                             _|    /_  \ \_\_
                                            {_\______\-'\__\_\
       -----------------------------------------------------------------------------------
                                           _____ ____ _____
                                          /    /      \    \ with the power of ruby
                                        /____ /_________\____\        i become stronger
                                        \    \          /    /                 and stronger 
                                           \  \        /  /
                                              \ \    / /
                                                \ \/ /
                                                  \/

-- PacketGen::Packet -------------------------------------------------
-- PacketGen::Header::RadioTap ---------------------------------------
              Int8          version: 0                (0x00)
              Int8              pad: 0                (0x00)
           Int16le           length: 8                (0x0008)
           Int32le    present_flags: 0                (0x00000000)
            String     radio_fields: ""
-- PacketGen::Header::Dot11::Management ------------------------------
             Int16       frame_ctrl: 32768            (0x8000)
           Int16le               id: 0                (0x0000)
           MacAddr             mac1: ff:ff:ff:ff:ff:ff
           MacAddr             mac2: aa:aa:aa:aa:aa:aa
           MacAddr             mac3: aa:aa:aa:aa:aa:aa
           Int16le    sequence_ctrl: 0                (0x0000)
           Int32le              fcs: 0                (0x00000000)
-- PacketGen::Header::Dot11::Beacon ----------------------------------
           Int64le        timestamp: 0                (0x0000000000000000)
           Int16le         interval: 1536             (0x0600)
           Int16le              cap: 1025             (0x0401)
    ArrayOfElements         elements: type:SSID,length:11,value:"kingforlary"

	Beacon Type       SSID Name            Interface        Beacons sent 
	---------------------------------------------------------------------
	Fake Beacon        kingforlary          wlan0mon          1
	Fake Beacon        kingforlary          wlan0mon          2
	Fake Beacon        kingforlary          wlan0mon          3
	Fake Beacon        kingforlary          wlan0mon          4
	Fake Beacon        kingforlary          wlan0mon          5
	Fake Beacon        kingforlary          wlan0mon          6
	Fake Beacon        kingforlary          wlan0mon          7
	Fake Beacon        kingforlary          wlan0mon          8
	Fake Beacon        kingforlary          wlan0mon          9
	Fake Beacon        kingforlary          wlan0mon          10
	Fake Beacon        kingforlary          wlan0mon          11
	Fake Beacon        kingforlary          wlan0mon          12
	Fake Beacon        kingforlary          wlan0mon          13
	Fake Beacon        kingforlary          wlan0mon          14
	Fake Beacon        kingforlary          wlan0mon          15
	Fake Beacon        kingforlary          wlan0mon          16
	Fake Beacon        kingforlary          wlan0mon          17
	Fake Beacon        kingforlary          wlan0mon          18
	Fake Beacon        kingforlary          wlan0mon          19
	Fake Beacon        kingforlary          wlan0mon          20
    ........................................................................

````````


first we can see we are brought down the the banner and the structure of the packet/header 

this will give us general information, the one think we can tell it worked is if one 

we have 0 errors and second the array of elements matches what we inputted


````
    ArrayOfElements         elements: type:SSID,length:11,value:"kingforlary"
````

we can also see the extra information i put below


breaking it down the Beacon Type is the type of beacon you are sending wether its real or fake 

then the SSID name is well the name you inputted 

the interface is the interface obviously being used 

the beacons sent is a constant records of how much beacons are sent